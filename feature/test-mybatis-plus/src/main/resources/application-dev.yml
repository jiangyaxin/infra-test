server:
  port: 30029


mybatis-generator:
  enable: true
  datasource:
    name: test1
  global:
    swagger: false
  package-path:
    parent: com.jyx.feature.test.mybatis.plus
    entity: domain.entity
    service: repository.repo1.service
    service-impl: repository.repo1.service.impl
    mapper: repository.repo1.mapper
    xml: mapper.test1
    request: resource.request
    response: resource.response
  strategy:
    file-override: true
    includes:
      - "stage"
    super-entity-class: ""

mybatis-plus:
  config-location: classpath:mybatis-config.xml
  type-aliases-package: com.jyx.feature.test.mybatis.plus.domain.entity

springfox:
  documentation:
    swagger-ui:
      enabled: true

spring:
  application:
    name: test-mybatis-plus
  datasource:
    dynamic:
      #设置默认的数据源或者数据源组
      primary: test1
      #严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源
      strict: true
      datasource:
        test1:
          url: jdbc:mysql://127.0.0.1:3306/jpa_test?serverTimezone=GMT%2B8&characterEncoding=utf8&useSSL=false&useUnicode=true&useCursorFetch=true&allowMultiQueries=true&rewriteBatchedStatements=true
          username: root
          password: 123456
          driver-class-name: com.mysql.cj.jdbc.Driver
          hikari:
            # 客户端创建连接等待超时时间,如果时间内没有获取连接则抛异常,默认 30 秒
            connection-timeout: 30000
            # 连接允许最长空闲时间,如果超时,则会被关闭，默认为 600 秒
            # 如果idleTimeout+1秒>maxLifetime 且 maxLifetime>0，则会被重置为0
            # 如果idleTimeout=0则表示空闲的连接在连接池中永远不被移除
            # 由定时线程每隔30秒检测一次，实际移除的时间时可能是idleTimeout+30秒，平均idleTimeout+15秒
            # idle-timeout: 600000

            # 会按照该时间间隔发送PING给数据库，JDBC4以上直接发送二进制数据，或者JDBC4以下发送connectionTestQuery
            # 防止它被数据库或网络基础设施超时，默认值为：0（禁用）
            keepalive-time: 0
            # 当达到这个时间后连接会被标记被移除，如果连接没有被使用会被删除。
            # 如果连接正在使用会在使用完成后被其他线程获取时被删除
            # 值为 0 表示没有最大生命周期，默认值：1800000（30 分钟）
            # 该值需要设置为比任何数据库或基础设施强加的连接时间限制短几秒。
            # 设置为0或过大，可能导致 no operations allowed after connection closed 异常。
            max-lifetime: 1600000
            # 该值不要设置
            # connectionTestQuery
            # 该值不要设置，默认与 maximumPoolSize 保持一致
            # minimumIdle
            # 连接池达到的最大大小，包括空闲和使用中的连接，默认值：10。
            maximumPoolSize: 20
            data-source-properties:
              logger: com.mysql.cj.log.Slf4JLogger
        test2:
          url: jdbc:mysql://127.0.0.1:3306/jpa_test2?serverTimezone=GMT%2B8&characterEncoding=utf8&useSSL=false&useUnicode=true&useCursorFetch=true&allowMultiQueries=true&rewriteBatchedStatements=true
          username: root
          password: 123456
          driver-class-name: com.mysql.cj.jdbc.Driver
          hikari:
            # 客户端创建连接等待超时时间,如果时间内没有获取连接则抛异常,默认 30 秒
            connection-timeout: 30000
            # 连接允许最长空闲时间,如果超时,则会被关闭，默认为 600 秒
            # 如果idleTimeout+1秒>maxLifetime 且 maxLifetime>0，则会被重置为0
            # 如果idleTimeout=0则表示空闲的连接在连接池中永远不被移除
            # 由定时线程每隔30秒检测一次，实际移除的时间时可能是idleTimeout+30秒，平均idleTimeout+15秒
            # idle-timeout: 600000

            # 会按照该时间间隔发送PING给数据库，JDBC4以上直接发送二进制数据，或者JDBC4以下发送connectionTestQuery
            # 防止它被数据库或网络基础设施超时，默认值为：0（禁用）
            keepalive-time: 0
            # 当达到这个时间后连接会被标记被移除，如果连接没有被使用会被删除。
            # 如果连接正在使用会在使用完成后被其他线程获取时被删除
            # 值为 0 表示没有最大生命周期，默认值：1800000（30 分钟）
            # 该值需要设置为比任何数据库或基础设施强加的连接时间限制短几秒。
            # 设置为0或过大，可能导致 no operations allowed after connection closed 异常。
            max-lifetime: 1600000
            # 该值不要设置
            # connectionTestQuery
            # 该值不要设置，默认与 maximumPoolSize 保持一致
            # minimumIdle
            # 连接池达到的最大大小，包括空闲和使用中的连接，默认值：10。
            maximumPoolSize: 20
            data-source-properties:
              logger: com.mysql.cj.log.Slf4JLogger
        acp_base:
          url: jdbc:mysql://127.0.0.1:3306/acp_base?serverTimezone=GMT%2B8&characterEncoding=utf8&useSSL=false&useUnicode=true&useCursorFetch=true&allowMultiQueries=true&rewriteBatchedStatements=true
          username: root
          password: 123456
          driver-class-name: com.mysql.cj.jdbc.Driver
          hikari:
            # 客户端创建连接等待超时时间,如果时间内没有获取连接则抛异常,默认 30 秒
            connection-timeout: 30000
            # 连接允许最长空闲时间,如果超时,则会被关闭，默认为 600 秒
            # 如果idleTimeout+1秒>maxLifetime 且 maxLifetime>0，则会被重置为0
            # 如果idleTimeout=0则表示空闲的连接在连接池中永远不被移除
            # 由定时线程每隔30秒检测一次，实际移除的时间时可能是idleTimeout+30秒，平均idleTimeout+15秒
            # idle-timeout: 600000

            # 会按照该时间间隔发送PING给数据库，JDBC4以上直接发送二进制数据，或者JDBC4以下发送connectionTestQuery
            # 防止它被数据库或网络基础设施超时，默认值为：0（禁用）
            keepalive-time: 0
            # 当达到这个时间后连接会被标记被移除，如果连接没有被使用会被删除。
            # 如果连接正在使用会在使用完成后被其他线程获取时被删除
            # 值为 0 表示没有最大生命周期，默认值：1800000（30 分钟）
            # 该值需要设置为比任何数据库或基础设施强加的连接时间限制短几秒。
            # 设置为0或过大，可能导致 no operations allowed after connection closed 异常。
            max-lifetime: 1600000
            # 该值不要设置
            # connectionTestQuery
            # 该值不要设置，默认与 maximumPoolSize 保持一致
            # minimumIdle
            # 连接池达到的最大大小，包括空闲和使用中的连接，默认值：10。
            maximumPoolSize: 20
            data-source-properties:
              logger: com.mysql.cj.log.Slf4JLogger

  shardingsphere:
#    database:
#      name:
    mode:
      type: Standalone
      repository:
        type: JDBC
        props:
          provider: MySQL
          jdbc_url: jdbc:mysql://127.0.0.1:3306/acp_base?serverTimezone=GMT%2B8&characterEncoding=utf8&useSSL=false&useUnicode=true
          username: root
          password: 123456
    datasource:
      names: test1,test2
    rules:
      sharding:
        tables:
          stage:
            actualDataNodes: test1.stage_$->{0..2},test2.stage_$->{0..2}
            tableStrategy:
              standard:
                shardingColumn: id
                shardingAlgorithmName: stage_inline
        sharding-algorithms:
          stage_inline:
            type: INLINE
            props:
              algorithm-expression: stage_$->{id % 2}
    props:
      sql-show: true

logging:
  file:
    name: ${spring.application.name}
    path: ./target/logs
  level:
    root: INFO
    com.jyx.feature.test.mybatis.plus.repository: DEBUG

app:
  cluster:
    enabled-cached-id-generator: false
    data-center-id: 1
    worker-id: 1

pipeline:
  enable: true
  config:
    log-pipeline:
      enable: true
      buffer-size: 1024
      stop-timeout: 10
      stop-time-unit: MILLISECONDS
      wait-strategy:
        wait-mode: PHASED_BACKOFF
        spin-timeout: 10
        timeout: 20
        time-unit: MILLISECONDS
        fallback-wait-mode: BLOCKING
      stage-config:
        stage1:
          parallel: 4
        stage2:
          parallel: 1
